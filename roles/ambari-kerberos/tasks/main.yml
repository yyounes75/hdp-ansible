---
  # - name: Check if Kerberos already installed
  #   uri:
  #     url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS"
  #     method: GET
  #     force_basic_auth: yes
  #     user: "admin"
  #     password: "admin"
  #     headers: '{"X-Requested-By":"ambari"}'
  #     validate_certs: no
  #     status_code: 200,201,202,404
  #     return_content: yes
  #   register: check_kerberos_services
  # 
  # - name: Fail if the Kerberos services already installed
  #   fail:
  #     msg: "Failed KERBEROS is already installed on {{ ambari_namespace }} cluster."
  #   when: check_kerberos_services.status == 404
  
  - name: Add KERBEROS service to the cluster
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS"
      method: POST
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari"}'
      validate_certs: no
      status_code: 200,201,202,404
      return_content: yes
    register: add_kerberos_services
  
  - name: Fail if the KERBEROS services can't be installed
    fail:
      msg: "Failed to install KERBEROS service on {{ ambari_namespace }} cluster."
    when: add_kerberos_services.status == 404
  # 
  - name: Add KERBEROS_CLIENT component to the cluster
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS/components/KERBEROS_CLIENT"
      method: POST
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari"}'
      validate_certs: no
      status_code: 200,201,202,404
      return_content: yes
    register: add_kerberos_client
  
  - name: Fail if the KERBEROS_CLIENT component can't be installed
    fail:
      msg: "Failed to install KERBEROS service on {{ ambari_namespace }} cluster."
    when: add_kerberos_client.status == 404
  
  - name: Transfer file
    template: >
      src=roles/ambari-kerberos/templates/krb5-conf.json.j2
      dest=/tmp/krb5-conf.json
  
  - name: Slurp the file
    slurp:
      src: "/tmp/krb5-conf.json"
    register: krb5
  
  - name: Add KERBEROS_CLIENT configuration
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}"
      method: PUT
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari"}'
      body: "{{ krb5.content | b64decode | to_json }}"
      body_format: json
      validate_certs: no
      # status_code: 200,201,202,404
      return_content: yes
    register: add_kerberos_client_conf
    until: add_kerberos_client_conf.status == 200 or add_kerberos_client_conf.status == 201 or add_kerberos_client_conf.status == 202
    retries: "{{ wait_timeout // 10 }}"
    delay: 60
    when: wait
    failed_when: (add_kerberos_client_conf.status == '500')
  
  - name: Fail if the KERBEROS_CLIENT configuration can't be deployed
    fail:
      msg: "Failed to install KERBEROS_CLIENT configuration on {{ ambari_namespace }} cluster."
    when: add_kerberos_client_conf.status == 404
  
  - name: Transfer file
    template: >
      src=roles/ambari-kerberos/templates/deploy_krb_client.json.j2
      dest=/tmp/deploy_krb_client.json
  
  - name: Slurp the file
    slurp:
      src: "/tmp/deploy_krb_client.json"
    register: deploy_krb_client
  
  - name: Deploy KERBEROS_CLIENT service for each hosts
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/hosts"
      method: POST
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari"}'
      body: "{{ deploy_krb_client.content | b64decode | to_json  }}"
      body_format: json
      validate_certs: no
      status_code: 200,201,202,404
      return_content: yes
    register: deploy_kerberos_client
  
  - name: Fail if the Kerberos client can't be deployed
    fail:
      msg: "Failed to deploy KERBEROS_CLIENT on each hosts of {{ ambari_namespace }} cluster."
    when: deploy_kerberos_client.status == 404
  
  - name: Install KERBEROS services
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/host_components?HostRoles/state=INIT"
      method: PUT
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
      body: '{ "HostRoles": { "state":"INSTALLED" } }'
      body_format: json
      validate_certs: no
      status_code: 200,201,202,404
      return_content: yes
    register: install_kerberos
  
  - name: Fail if the install of Kerberos
    fail:
      msg: "Failed to install KERBEROS on {{ ambari_namespace }} cluster."
    when: install_kerberos.status == 404
  
  - name: Sleep
    shell: sleep 10
  
  - name: Stop all services
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services"
      method: PUT
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
      body: '{"RequestInfo":{"context":"_PARSE_.STOP.ALL_SERVICES","operation_level":{"level":"CLUSTER","cluster_name":"{{ ambari_namespace }}"}},"Body":{"ServiceInfo":{"state":"INSTALLED"}}}'
      body_format: json
      validate_certs: no
      status_code: 200,201,202
      return_content: yes
    register: check_stop_all_services
  
  - name: Wait for all services to be stopped
    uri:
      url: "{{ (check_stop_all_services.content|from_json).href }}"
      method: GET
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
      status_code: 200,201,202
      validate_certs: no
      return_content: yes
    register: cluster_check_task_stop_services
    until: (((cluster_check_task_stop_services.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task_stop_services.content|from_json).Requests.completed_task_count|int > 0) or
          (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'FAILED' or
          (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'TIMEDOUT' or
          (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'ABORTED')
    retries: "{{ wait_timeout // 10 }}"
    delay: 30
    when: wait and check_stop_all_services is defined and (check_stop_all_services.content) != ""
  
  - name: Fail if the stop all services is in an error state
    fail:
      msg: "Failed to stop all services of the {{ ambari_namespace }} cluster. Task Status is {{ (cluster_check_task_stop_services.content|from_json).Requests.request_status }}."
    when: (check_stop_all_services.status == 404 or (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'FAILED' or (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'TIMEDOUT' or (cluster_check_task_stop_services.content|from_json).Requests.request_status == 'ABORTED')
  
  - name: Transfer file
    template: >
      src=roles/ambari-kerberos/templates/krb_enable.json.j2
      dest=/tmp/krb_enable.json
  
  - name: Slurp the file
    slurp:
      src: "/tmp/krb_enable.json"
    register: krb_enable
  
  - name: Add KERBEROS_CLIENT configuration
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}"
      method: PUT
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari"}'
      body: "{{ krb_enable.content | b64decode | to_json }}"
      body_format: json
      validate_certs: no
      return_content: yes
    register: add_kerberos_client_conf
    until: add_kerberos_client_conf.status == 200 or add_kerberos_client_conf.status == 201 or add_kerberos_client_conf.status == 202
    retries: "{{ wait_timeout // 10 }}"
    delay: 60
    when: wait
    failed_when: (add_kerberos_client_conf.status == '500')
  
  - name: Wait for KERBEROS to be fully installed on the cluster
    uri:
      url: "{{ (add_kerberos_client_conf.content|from_json).href }}"
      method: GET
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
      status_code: 200,201,202
      validate_certs: no
      return_content: yes
    register: cluster_check_kerberos_install
    until: (((cluster_check_kerberos_install.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_kerberos_install.content|from_json).Requests.completed_task_count|int > 0) or
          (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'FAILED' or
          (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'TIMEDOUT' or
          (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'ABORTED')
    retries: "{{ wait_timeout // 10 }}"
    delay: 30
    when: wait and add_kerberos_client_conf is defined and (add_kerberos_client_conf.content) != ""
  
  - name: KERBEROS installation failed
    fail:
      msg: "KERBEROS installation failed on {{ ambari_namespace }} cluster."
    when: ((cluster_check_kerberos_install.content|from_json).Requests.request_status == 'FAILED' or
          (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'TIMEDOUT' or
          (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'ABORTED')

  - name: Restart required service
    uri:
      url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/requests"
      method: POST
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
      body: '{"RequestInfo":{"command":"RESTART","context":"Restart all required services","operation_level":"host_component"},"Requests/resource_filters":[{"hosts_predicate":"HostRoles/stale_configs=true"}]}'
      body_format: json
      validate_certs: no
      status_code: 200,201,202,404
      return_content: yes
    register: restart_all_required_services
  
  - name: Wait for all services to be restarted
    uri:
      url: "{{ (restart_all_required_services.content|from_json).href }}"
      method: GET
      force_basic_auth: yes
      user: "admin"
      password: "admin"
      headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
      status_code: 200,201,202
      validate_certs: no
      return_content: yes
    register: cluster_check_task_restart_services
    until: (((cluster_check_task_restart_services.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task_restart_services.content|from_json).Requests.completed_task_count|int > 0) or
          (cluster_check_task_restart_services.content|from_json).Requests.request_status == 'FAILED' or
          (cluster_check_task_restart_services.content|from_json).Requests.request_status == 'TIMEDOUT' or
          (cluster_check_task_restart_services.content|from_json).Requests.request_status == 'ABORTED')
    retries: "{{ wait_timeout // 10 }}"
    delay: 30
    when: wait and restart_all_required_services is defined and (restart_all_required_services.content) != ""
  
  - name: Restart failed
    fail:
      msg: "Restart all required services failed on {{ ambari_namespace }} cluster."
    when: ((cluster_check_task_restart_services.content|from_json).Requests.request_status == 'FAILED' or
        (cluster_check_task_restart_services.content|from_json).Requests.request_status == 'TIMEDOUT' or
        (cluster_check_task_restart_services.content|from_json).Requests.request_status == 'ABORTED')